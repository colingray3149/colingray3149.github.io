---
import BaseLayout from './BaseLayout.astro';
import ImageModal from '../components/ImageModal.astro';
const { frontmatter } = Astro.props;
---
<BaseLayout title={`${frontmatter.title} — Colin Gray`}>
  <div class="project-content">
    <div class="project-header">
      <h1 class="project-title">{frontmatter.title}</h1>
      {frontmatter.reportUrl && (
        <a href={frontmatter.reportUrl} class="download-button" download>
          <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/><polyline points="7 10 12 15 17 10"/><line x1="12" y1="15" x2="12" y2="3"/></svg>
          Download Report
        </a>
      )}
    </div>
    <p class="project-subtitle text-muted">{frontmatter.subtitle}</p>

    <div class="cyber-box summary-box">
      <slot name="summary" />
    </div>

    <div class="timeline-toggle">
      <button id="timeline-btn" class="cyber-button">Show Project Timeline</button>
    </div>

    <section id="timeline-section" class="timeline-section">
      <h2 class="section-title">Timeline</h2>
      <slot name="timeline" />
    </section>
  </div>

  <ImageModal />
  <a id="return-to-top-btn" href="#" title="Return to top">&uarr;</a>
</BaseLayout>

<style>
  /* NEW: Main content container for project pages */
  .project-content {
    max-width: 1100px;
    margin-inline: auto;
    padding-inline: 1rem;
  }

  /* --- Header & Download Button (Unchanged) --- */
  .project-header {
    display: flex;
    justify-content: center;
    align-items: center;
    position: relative;
    padding: 0 170px;
    box-sizing: border-box;
    margin-bottom: 8px;
    min-height: 50px;
  }
  .project-title {
    margin: 0;
    text-align: center;
  }
  .download-button {
    position: absolute;
    right: 0;
    top: 50%;
    transform: translateY(-50%);
    display: inline-flex;
    align-items: center;
    gap: 10px;
    padding: 10px 18px;
    border: 2px solid var(--line-bright);
    border-radius: 8px;
    background: var(--panel-2);
    color: var(--cyan);
    font-weight: 600;
    text-decoration: none;
    transition: all 0.3s ease;
    white-space: nowrap;
  }
  .download-button:hover {
    background: var(--glow-cyan);
    border-color: var(--cyan);
    color: var(--text);
    transform: translateY(-50%) scale(1.05);
  }
  .project-subtitle { text-align: center; margin-bottom: 40px; }
  
  /* --- Summary Box & General Components (Unchanged) --- */
  .summary-box { padding: 32px; }
  .timeline-toggle { text-align: center; margin: 40px 0; }
  .section-title { text-align: center; margin-bottom: 40px; }
  .timeline-section { display: none; }
  .timeline-section.visible { display: block; }
  .cyber-button {
    background: var(--panel-2);               /* solid background for city/dark */
    border: 2px solid var(--line-bright);
    color: var(--cyan);
    padding: 12px 24px;
    font-size: 1rem;
    border-radius: 12px;
    cursor: pointer;
    transition: all 0.2s ease;
    box-shadow: 0 0 0 transparent;
  }
  .cyber-button:hover {
    background: var(--glow-cyan);             /* bright hover */
    border-color: var(--cyan);
    color: var(--text);
    box-shadow: 0 0 12px var(--glow-cyan);
  }
  html.light-theme .cyber-button {
    background: #f1f5f9;                      /* solid in light theme too */
    color: #0f172a;
    border-color: #cbd5e1;
  }

  /* --- IMAGE GRID FINAL FIX (CSS GRID APPROACH) --- */
/* Image grid — apply to slotted content via :global() so scoped CSS hits slots */
:global(.image-grid) {
  display: grid;
  grid-template-columns: repeat(2, minmax(0, 1fr));
  gap: 24px;
  margin-top: 32px;
  /* No arbitrary max-width here; let the parent .project-content (max-width:1100px) control overall width */
}

:global(.image-grid .image-cell figure) {
  margin: 0;
}

:global(.image-grid .image-cell img) {
  display: block;
  width: 100%;
  height: auto;
  max-height: var(--grid-img-max, 360px);   /* same idea as timeline */
  object-fit: contain;                      /* show full image */
  border-radius: 8px;
  border: 1px solid var(--line);
  background: var(--panel-2);               /* nice letterbox for very tall images */
}


:global(.image-grid .image-cell figcaption) {
  text-align: center;
  font-size: 0.9rem;
  color: var(--muted);
  margin-top: 12px;
}

/* Let very tall overview images hang out a bit on desktop */
@media (min-width: 821px) {
  :global(.image-grid .image-cell.is-tall) {
    width: calc(100% + 10%);
  }
  :global(.image-grid .image-cell.is-tall:nth-child(odd)) {
    margin-left: -10%;
  }
  :global(.image-grid .image-cell.is-tall:nth-child(even)) {
    margin-right: -10%;
  }
}


  
  /* --- Responsive Adjustments --- */
  @media (max-width: 820px) {
    .project-header {
      flex-direction: column;
      padding: 0;
      position: static;
      gap: 1rem;
    }
    .download-button {
      position: static;
      transform: none;
    }
:global(.image-grid) { 
  grid-template-columns: 1fr; 
}

  }

  /* Return to Top Button (Unchanged) */
  #return-to-top-btn {
    position: fixed;
    bottom: 20px;
    right: 20px;
    background: var(--panel-elevated);
    width: 50px;
    height: 50px;
    display: flex;
    align-items: center;
    justify-content: center;
    text-decoration: none;
    border-radius: 50%;
    color: var(--cyan);
    font-size: 2rem;
    border: 2px solid var(--line-bright);
    transition: all 0.3s ease;
    opacity: 0;
    visibility: hidden;
    z-index: 500;
  }
  #return-to-top-btn.visible {
    opacity: 1;
    visibility: visible;
  }
  #return-to-top-btn:hover {
    background: var(--glow-cyan);
    border-color: var(--cyan);
    transform: translateY(-2px);
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Timeline toggle button logic
    const timelineBtn = document.getElementById('timeline-btn');
    const timelineSection = document.getElementById('timeline-section');
    if (timelineBtn && timelineSection) {
      timelineBtn.addEventListener('click', () => {
        const isVisible = timelineSection.classList.toggle('visible');
        timelineBtn.textContent = isVisible ? 'Hide Project Timeline' : 'Show Project Timeline';
      });
    }

    // Image Modal logic
    const modal = document.getElementById('image-modal');
    const modalImage = document.getElementById('modal-image');
    const modalDesc = document.getElementById('modal-description');
    const closeModalBtn = document.getElementById('modal-close');
    const clickableImages = document.querySelectorAll('.timeline-image-container');

    clickableImages.forEach(container => {
      container.addEventListener('click', (e) => {
        e.preventDefault();
        const img = container.querySelector('img');
        modalImage.src = img.src;
        modalDesc.innerHTML = container.dataset.description;
        // (optional: open links in a new tab safely)
        modalDesc.querySelectorAll('a').forEach(a => {
          a.target = '_blank';
          a.rel = 'noopener noreferrer';
        });

        modal.classList.add('visible');
      });
    });

    const closeModal = () => modal.classList.remove('visible');
    closeModalBtn.addEventListener('click', closeModal);
    modal.addEventListener('click', (e) => { if(e.target === modal) closeModal(); });

    // Return to Top button logic
    const topBtn = document.getElementById('return-to-top-btn');
    if(topBtn) {
      window.addEventListener('scroll', () => {
        if (window.scrollY > 300) {
          topBtn.classList.add('visible');
        } else {
          topBtn.classList.remove('visible');
        }
      });
      topBtn.addEventListener('click', (e) => {
        e.preventDefault();
        window.scrollTo({ top: 0, behavior: 'smooth' });
      });
    }

      // --- Tall-image tagging (both Timeline and Overview grid) ---
  function markTall(img) {
    const ratio = img.naturalWidth / img.naturalHeight;
    // consider "tall" if portrait-ish (tweak threshold to taste)
    if (ratio < 0.9) {
      const tlContainer = img.closest('.timeline-image-container');
      const gridCell = img.closest('.image-cell');
      if (tlContainer) tlContainer.classList.add('is-tall');
      if (gridCell) gridCell.classList.add('is-tall');
    }
  }
  document.querySelectorAll('.timeline-image-container img, .image-grid .image-cell img')
    .forEach(img => img.complete ? markTall(img) : img.addEventListener('load', () => markTall(img)));
  });
</script>

